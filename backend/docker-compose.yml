# Convooy Backend Docker Compose Configuration
# 
# Database Setup:
# - PostgreSQL database is automatically created
# - Prisma handles schema initialization (no init.sql needed)
# - Database schema is pushed on API container startup
#
# Usage:
#   docker compose up          # Start all services
#   docker compose up postgres # Start only database
#   docker compose logs api    # View API logs

services:
  # PostgreSQL Database
  # Note: Database schema is managed by Prisma migrations, not init.sql
  postgres:
    image: postgres:15-alpine
    container_name: convooy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: convooy_db
      POSTGRES_USER: convooy_user
      POSTGRES_PASSWORD: convooy_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U convooy_user -d convooy_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: convooy-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (for production)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: convooy-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://convooy_user:convooy_password@postgres:5432/convooy_db
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000
      - OPENSSL_CONF=/dev/null
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    # Initialize database schema with Prisma on startup
    command: sh -c "npx prisma db push && yarn start"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
